# [x,y] position for each vertex of each obstacle
#obstacles in double, and you should append the starting point at the end to show this is a closed shape

obstacles: [
  [[12.0,6.0], [14.5, 3.5], [17.0, 5.5], [17.0, 8.5], [14.0,8.0], [12.0,6.0]],
  [[24.0,6.0], [26.0,3.5], [31.0,7.5], [24.5,9.5], [24.0,6.0]],
  [[34.0,26.0], [10.0,26.0], [10.0,12.0], [34.0,12.0], [34.0,26.0]],
  [[0.0,26.0], [0.0,6.0], [4.0,6.0], [4.0,26.0],[0.0,26.0]],
  [[4.0,32.0], [6.0,30.0], [8.0,32.0], [4.0,32.0]],
  [[17.0,32.0], [18.0,30.0], [19.0,32.0], [17.0,32.0]],
  [[0.0,36.0], [0.0,32.0], [29.0,32.0], [29.0,36.0], [0.0,36.0]],
  [[34.0,36.0], [33.0,34.0], [34.0,32.0], [34.0,36.0]],
  [[6.0,44.0], [2.0,43.0], [2.0,39.0], [6.0,38.0], [8.0,41.0], [6.0,44.0]],
  [[11.0,48.0], [17.0,41.0], [14.0,48.0], [11.0,48.0]],
  [[30.0,48.0], [22.0,40.0], [32.0,48.0], [30.0,48.0]]
]
map_x_lims: [0, 34] # x_min, x_max
map_y_lims: [0, 48] # y_min, y_max

robot_radius: 0.1 # buffer radius for the robot
k_nearest: 12 # number of neighbors to try and create an edge to
sample_size: 1000 # number of nodes to sample
cell_size: 0.2  #distance between each cell in meter
grid_map_update_rate: 24   #update frequency of grid_map, can also be used for visualizing grid-based planning
#start: [7,3]
#goal: [7,26]

start: [2, 2]
goal: [19,29]

#start: [3,3]    #start for global planning, D* star lite will get stuck here with heuristic being euclidean distance
#goal: [3,46]    #goal for global planning

#start: [6, 27]    #start for global planning
#goal: [3,46]    #goal for global planning

#start: [3,3]   #no path
#goal: [3,7]

# LPA* and D* Lite
scan_length: 10     #the view range of the robot is a square (2*scan_length+1) * (2*scan_length+1)
sleep_time: 0.5      #the life time of each path
update_row_num: 1
