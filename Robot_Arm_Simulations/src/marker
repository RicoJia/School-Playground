#!/usr/bin/env python
'''
Marker for drawing points in the robot arm simulation
'''

import rospy
from geometry_msgs.msg import Point
from visualization_msgs.msg import Marker
import tf


class marker_line_strip(object):
    def __init__(self):

        self.marker=Marker()
        self.marker.header.frame_id = "/base_link"      #frame id has to be the frame you want to see it in
        self.marker.header.stamp = rospy.Time.now()
        self.marker.id = 1
        self.marker.type = Marker.LINE_LIST
        self.marker.ns = "line_list"

        self.marker.action = Marker.ADD  #??

        self.marker.pose.orientation.w = 1.0
        # Set the scale of the marker -- 1x1x1 here means 1m on a side
        self.marker.scale.x = 0.05

         #Set the color -- be sure to set alpha to something non-zero!
        self.marker.color.r = 1.0
        self.marker.color.g = 105.0/255.0
        self.marker.color.b = 180.0/255.0
        self.marker.color.a = 1.0

        self.marker.lifetime = rospy.Duration.from_sec(rospy.get_param("/heart_drawing_arm/T")*0.95)
        self.main_loop()

    def main_loop(self):
        T_marker = rospy.get_param("/heart_drawing_arm/T_marker")
        marker_pub = rospy.Publisher("visualization_marker",Marker,queue_size = 0)
        listener = tf.TransformListener()
        listener.waitForTransform('/base_link','/end_effector',rospy.Time(), rospy.Duration(1.0))
        rate = rospy.Rate(1.0/T_marker)
        i = 0.0
        current_point = Point()
        previous_point = Point()
        while not rospy.is_shutdown():
            (trans,rot) = listener.lookupTransform( '/base_link','/end_effector', rospy.Time(0))
            current_point.x = trans[0]
            current_point.y = trans[1]
            current_point.z = 0

            if i!= 0:
                self.marker.header.stamp = rospy.Time.now()
                self.marker.id = i
                self.marker.points = [previous_point, current_point]
                marker_pub.publish(self.marker)

            previous_point.x = current_point.x
            previous_point.y = current_point.y
            i+=1.0
            rate.sleep()


def main():
    rospy.init_node("marker")
    marker_line_strip()
    rospy.spin()

if __name__ == "__main__":
    main()
