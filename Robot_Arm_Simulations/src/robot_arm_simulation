#!/usr/bin/python
'''
Simulator of a 3R arm that draws a heart. The dexterity space is a circular ring with
hollow inner circle (r = 0.01), and solid outer_circle(r = 2)
The starting position of the motions is set to (L1/2, 0)), then the arm will carrt out periodical motion along the intended trajectory.
'''

from inverse_kinematics_2d import ik_body
import rospy
from sensor_msgs.msg import JointState
import numpy as np

#Definition of the trajectory
T = rospy.get_param("/heart_drawing_arm/T")
dt = rospy.get_param("/heart_drawing_arm/dt")
t_list = np.linspace(0,2.0*np.pi, num = T/dt)
TRAJECTORY_X = 16.0*np.power(np.sin(t_list), 3)
TRAJECTORY_Y = ( 13.0*np.cos(t_list) - 5.0*np.cos(2.0*t_list) - 2.0*np.cos(3.0*t_list) - np.cos(4.0*t_list) )

def angle_wrapped(theta):
    theta = np.sign(theta)*(abs(theta)%(2.0*np.pi))
    if abs(theta)>np.pi:
        r = -1.0 if theta> 0 else 0
        theta = r*np.pi + theta%np.pi
    return theta

def get_scaling_coefficient(x_list, y_list, outer_radius, inner_radius):
    '''
    Purpose: scale the input trajectory functions so the trajectory can be fit inside the workspace of the robot.
    To ensure safety, the effective workspace is shrunk to 0.8 of its original size. If the trajectory contains points that lie inside and outside the
    robot's workspace, then the trajectory is not achievable.
    Inputs: 1. X, and y at all time instances along a trajectory 2. The outer and inner radii of the workspace of the robot
    Output: scaling coefficient. Example usage: x = r*original_x, y = r*original_y
    '''
    max_len = outer_radius
    min_len = inner_radius
    for i in range(len(x_list)):
        d = np.linalg.norm([ [x_list[i], y_list[i]] ])
        if d>max_len:
            max_len = d
        elif d<min_len:
            min_len = d
    if max_len > outer_radius and min_len < inner_radius:
        r = 0
        rospy.signal_shutdown("Target trajectory is unachievable as it contains points that lie inside and outside the robot's workspace")
    else:
        r = 0.8*(outer_radius - inner_radius)/(max_len - min_len)
    return r


class robot_arm(object):
    def __init__(self):
        global TRAJECTORY_X, TRAJECTORY_Y, dt
        self.L1 = rospy.get_param("/heart_drawing_arm/L1")
        self.L2 = rospy.get_param("/heart_drawing_arm/L2")
        self.L3 = rospy.get_param("/heart_drawing_arm/L3")

        outer_radius = self.L1+self.L2-self.L3
        inner_radius = self.L3
        self.r = get_scaling_coefficient(TRAJECTORY_X, TRAJECTORY_Y, outer_radius, inner_radius)
        self.iter_index = 0

        self.joint1_angle = np.pi/2.0
        self.joint2_angle = -np.pi
        self.joint3_angle = np.pi/2.0
        self.joint_publisher = rospy.Publisher("joint_states", JointState, queue_size = 0)

        rate = rospy.Rate(1.0/dt)
        while True:
            x,y = self.get_desired_pos()
            self.update_joint_angles(x,y)
            self.publish()
            rate.sleep()

    def get_desired_pos(self):

        if self.iter_index == len(TRAJECTORY_X):
            self.iter_index = 0

        x = self.r*TRAJECTORY_X[self.iter_index]
        y = self.r*TRAJECTORY_Y[self.iter_index]

        Rot = np.array([[0, 1.0],
                        [-1.0, 0]])
        [x,y] = Rot.dot(np.array([x,y]) )
        self.iter_index+=1
        return x,y

    def update_joint_angles(self, x, y):
        '''
        Updates the three joint angles: joint1_angle, joint2_angle, joint3_angle
        '''
        Tsd = np.array([[1.0, 0.0, x],
                        [0.0, 1.0, y],
                        [0.0, 0.0, 1.0]])
        M = np.array([[1.0, 0, self.L1+ self.L2 + self.L3],
                      [0, 1.0, 0],
                      [0, 0, 1.0]])
        thetalist = np.array([self.joint1_angle, self.joint2_angle, self.joint3_angle])
        blist = np.array([[1.0, 0, self.L1+self.L2+self.L3],
                          [1.0, 0, self.L2+self.L3],
                          [1.0, 0, self.L3]])
        error_theta = 0.01
        error_v = 0.001

        thetalist_new ,success = ik_body(M, Tsd, thetalist, blist, error_theta, error_v)
        if success:
            #angle wrapping
            for i in range(len(thetalist_new)):
                thetalist_new[i] = angle_wrapped(thetalist_new[i])
            self.joint1_angle = thetalist_new[0]
            self.joint2_angle = thetalist_new[1]
            self.joint3_angle = thetalist_new[2]

        print "x,y: ",x,y, "| joint_angle: ", thetalist_new, "| success: ", success


    def publish(self):
        joint_msg = JointState()
        joint_msg.header.stamp = rospy.Time.now()
        joint_msg.name = ['base_link_upper_arm', 'upper_arm_lower_arm', "lower_arm_gripper_arm"]
        joint_msg.position = [self.joint1_angle,self.joint2_angle,self.joint3_angle]
        self.joint_publisher.publish(joint_msg)

if __name__ == "__main__":
    try:
        rospy.init_node("heart_drawing_arm")
        robot_arm()
        rospy.spin()
    except rospy.ROSInterruptException:
        pass

