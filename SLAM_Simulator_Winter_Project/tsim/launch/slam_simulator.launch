<!-- Purpose: launch waypoints generation node, turtlesim, differential drive model in rviz, fake_diff_encoders and odometer nodes for visualization-->
<launch>

  <!-- Rviz nodes and parameters.
       The robot_state_publisher reads the urdf from /robot_description parameter
       and listens to joint information on the /joint_states topic -->
<node name="rviz" pkg="rviz" type="rviz" args="-d $(find nuturtle_description)/config/view_robot.rviz" required="true"/>
<param name="robot_description" command="$(find xacro)/xacro --inorder '$(find nuturtle_description)/urdf/diff_drive.urdf.xacro'"/>
<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

<!--  launch robot control node -->
<node name = "noiseless_control" pkg = "tsim"  type = "noiseless_control" output="screen" >
  <rosparam file="$(find real_world)/config/params.yaml" />
    <remap from="/cmd_vel" to="/turtle1/cmd_vel"/>
</node>

<!--Launch obstacles-->
<node name="Obstacles" pkg="real_world" type="obstacles">
      <rosparam file="$(find real_world)/config/params.yaml" />
</node>

<!--Launch fake odometer that reads wheel positions from the real world node. Useful for the filter  -->
<node name = "Odometer" pkg = "rigid2d"  type = "rigid2d_Odometer_node" output="screen" >
  <rosparam file="$(find real_world)/config/params.yaml" />
  <remap from="body_frame_id" to="~body_frame_id"/>
  <remap from="right_wheel_joint" to="~right_wheel_joint"/>
  <remap from="left_wheel_joint" to="~left_wheel_joint"/>
  <remap from="odom_frame_id" to="~odom_frame_id"/>
</node>

<!--launch fake wheel encoders that transforms control node's noiseless control input to wheel position -->
<node name = "Fake_Diff_Encoders" pkg = "rigid2d"  type = "rigid2d_Fake_Diff_Encoders_node" output="screen" >
  <rosparam file="$(find real_world)/config/params.yaml" />
  <remap from="body_frame_id" to="~body_frame_id"/>
  <remap from="right_wheel_joint" to="~right_wheel_joint"/>
  <remap from="left_wheel_joint" to="~left_wheel_joint"/>
  <remap from="odom_frame_id" to="~odom_frame_id"/>
  <remap from="/cmd_vel" to="/turtle1/cmd_vel"/>
</node>

<!--Outputs wheel positions of the robot after noise is added to the control input. Also outputs laser scan data   -->
<node name = "RealWorld" pkg = "real_world"  type = "real_world" output="screen">
  <rosparam file="$(find real_world)/config/params.yaml" />
</node>

<!--Your filter node here :)-->
<node name="ekf_node" pkg="ekf_slam" type="ekf_node" output="screen">
    <rosparam file="$(find real_world)/config/params.yaml" />
</node>

</launch>
