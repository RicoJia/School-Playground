#THIS FILE HAS ALL THE TUNABLE PARAMETERS FOR THE FILTER

#########################################Filter Parameters (Tune these parameters as you wish!)

#miu_vel: mean of velocities [angular, linear]
#stddev_vel: standard deviation of velocity
#miu_z:  mean of observation, [range, bearing]
#stddev_z:  standard deviation of observation

miu_vel: [0.0, 0.0]
stddev_vel: [0.002,0.002]
miu_z:  [0.0,0.0]
stddev_z:  [0.0,0.0]
laser_scan_on: 1

#########################################Control parameters Parameters
#waypoints_x: x coordinates of waypointss
#waypoints_y: y coordinates of waypointss
#trans_vel: max translational speed of the robot in m/s
#rot_vel: max rotational speed of the robot in rad/s
waypoints_x: [0.0, 0.3, 0.6, 0.9, 1.5]
waypoints_y: [0.0, 0.0, 0.0, 0.0, 0.0]
trans_vel: 0.22
rot_vel: 2.84


#########################################Robot Parameters
#wheel_width: The width of the wheels
#wheel_radius: The radius of the wheels
#wheel_base: The distance between the centers wheels
#chassis_length: The length of the main chassis link
#chassis_thickness: The thickness of the plate that forms the chassis
#wheel_axle_offset: the gap between the bottom of the robot and the wheel axle. If wheel_axle_offset = 0, the wheel axle is right on the bottom of the robot.
#scan_radius: maximum scan radius of the laser scanner
#laser_scanner_radius: the radius of the physical laser scanner
#laser_scanner_height: the height of the physical laser scanner
wheel_width: 0.018
wheel_radius: 0.033
wheel_base: 0.16
chassis_length: 0.138
chassis_thickness: 0.140
wheel_mass: 0.03
chassis_mass: 1.0
wheel_axle_offset: 0.02
scan_radius: 3.0
laser_scanner_radius: 0.02
laser_scanner_height: 0.02


#########################################Visualization Parameters
#rectangular_obstacles_length: length of a rectangular obstacles' side along its positive x axes
#rectangular_obstacles_width: length of rectangular obstacles' side perpendicular to its positive x axes
#rectangular_obstacles_orientation: angle between the rectangular obstacles' positive x axes and the world frame's positive x axes
#circular obstacles: x, y are coordinates of the obstacles' centers in the map frame.
#rectangular obstacles: x, y are coordinates of the obstacles' centers in the map frame.
#orientation is the angle between the map's positive x axis, and the obstacle's positive x axis (obstacle frame is located at itscenter)
#length is defined as the length of the side that is parallel to the x axis of the cube. Width is parallel to the y axis of the cube. Height is automatically 0.5m

circular_obstacles_x: [-1.0, 0.0, 1.0]
circular_obstacles_y: [3.0, 3.0, 3.0]
circular_obstacles_num: 3
circular_obstacle_radius: 0.2    #assume cylindrical circular_obstacles
rectangular_obstacles_x: [0.0, 0.0, 4.1, -4.1]
rectangular_obstacles_y: [-4.1, 4.1, 0.0, 0.0]
rectangular_obstacles_length: [8.4, 8.4, 8.0, 8.0]
rectangular_obstacles_width: [0.2, 0.2, 0.2, 0.2]
rectangular_obstacles_orientation: [0.0, 0.0, 1.57, -1.57]


#########################################Implementation Parameters (Modification Not Recommended)
#frequency: publishing frequencies of "real_world" messages. This is also the publishing frequency of the control input in the control node
#WARNING: Changing frequency might cause asynchronization issues, because a python implementation of a filter might be too slow for high frequency.
#frame_ids: name of frames of the robot.
frequency: 20
odom_frame_id: 'odom'
body_frame_id: 'estimation'
map_frame_id: 'map'
world_frame_id: 'world'
actual_robot_frame_id: "actual_robot"
left_wheel_joint: 'left_wheel_axle'
right_wheel_joint: 'right_wheel_axle'




